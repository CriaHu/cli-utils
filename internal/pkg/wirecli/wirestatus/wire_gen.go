// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wirestatus

import (
	"io"
	"sigs.k8s.io/cli-experimental/internal/pkg/clik8s"
	"sigs.k8s.io/cli-experimental/internal/pkg/status"
	"sigs.k8s.io/cli-experimental/internal/pkg/util"
	"sigs.k8s.io/cli-experimental/internal/pkg/wirecli/wireconfig"
	"sigs.k8s.io/cli-experimental/internal/pkg/wirecli/wiregit"
	"sigs.k8s.io/cli-experimental/internal/pkg/wirecli/wirek8s"
)

// Injectors from wire.go:

func InitializeStatus(resourceConfigPath clik8s.ResourceConfigPath, writer io.Writer, args util.Args) (*status.Status, error) {
	pluginConfig := wireconfig.NewPluginConfig()
	factory := wireconfig.NewResMapFactory(pluginConfig)
	fileSystem := wireconfig.NewFileSystem()
	transformerFactory := wireconfig.NewTransformerFactory()
	kustomizeProvider := wireconfig.NewKustomizeProvider(factory, fileSystem, transformerFactory, pluginConfig)
	resourceConfigs, err := wireconfig.NewResourceConfig(resourceConfigPath, kustomizeProvider)
	if err != nil {
		return nil, err
	}
	configFlags, err := wirek8s.NewConfigFlags(args)
	if err != nil {
		return nil, err
	}
	config, err := wirek8s.NewRestConfig(configFlags)
	if err != nil {
		return nil, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		return nil, err
	}
	repository := wiregit.NewOptionalRepository(resourceConfigPath)
	commitIter := wiregit.NewOptionalCommitIter(repository)
	commit := wiregit.NewOptionalCommit(commitIter)
	statusStatus := &status.Status{
		Resources: resourceConfigs,
		Out:       writer,
		Clientset: clientset,
		Commit:    commit,
	}
	return statusStatus, nil
}

func DoStatus(resourceConfigPath clik8s.ResourceConfigPath, writer io.Writer, args util.Args) (status.Result, error) {
	pluginConfig := wireconfig.NewPluginConfig()
	factory := wireconfig.NewResMapFactory(pluginConfig)
	fileSystem := wireconfig.NewFileSystem()
	transformerFactory := wireconfig.NewTransformerFactory()
	kustomizeProvider := wireconfig.NewKustomizeProvider(factory, fileSystem, transformerFactory, pluginConfig)
	resourceConfigs, err := wireconfig.NewResourceConfig(resourceConfigPath, kustomizeProvider)
	if err != nil {
		return status.Result{}, err
	}
	configFlags, err := wirek8s.NewConfigFlags(args)
	if err != nil {
		return status.Result{}, err
	}
	config, err := wirek8s.NewRestConfig(configFlags)
	if err != nil {
		return status.Result{}, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		return status.Result{}, err
	}
	repository := wiregit.NewOptionalRepository(resourceConfigPath)
	commitIter := wiregit.NewOptionalCommitIter(repository)
	commit := wiregit.NewOptionalCommit(commitIter)
	statusStatus := &status.Status{
		Resources: resourceConfigs,
		Out:       writer,
		Clientset: clientset,
		Commit:    commit,
	}
	result, err := NewStatusCommandResult(statusStatus, writer)
	if err != nil {
		return status.Result{}, err
	}
	return result, nil
}
