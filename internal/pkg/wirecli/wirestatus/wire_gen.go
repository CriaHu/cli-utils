// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wirestatus

import (
	"sigs.k8s.io/cli-utils/internal/pkg/clik8s"
	"sigs.k8s.io/cli-utils/internal/pkg/resourceconfig"
	"sigs.k8s.io/cli-utils/internal/pkg/status"
	"sigs.k8s.io/cli-utils/internal/pkg/util"
	"sigs.k8s.io/cli-utils/internal/pkg/wirecli/wireconfig"
	"sigs.k8s.io/cli-utils/internal/pkg/wirecli/wirek8s"
)

// Injectors from wire.go:

func DoStatus(resourceConfigPath clik8s.ResourceConfigPath, args util.Args) ([]status.ResourceResult, error) {
	configFlags, err := wirek8s.NewConfigFlags(args)
	if err != nil {
		return nil, err
	}
	config, err := wirek8s.NewRestConfig(configFlags)
	if err != nil {
		return nil, err
	}
	dynamicInterface, err := wirek8s.NewDynamicClient(config)
	if err != nil {
		return nil, err
	}
	restMapper, err := wirek8s.NewRestMapper(config)
	if err != nil {
		return nil, err
	}
	client, err := wirek8s.NewClient(dynamicInterface, restMapper)
	if err != nil {
		return nil, err
	}
	resolver := &status.Resolver{
		DynamicClient: client,
	}
	pluginConfig := wireconfig.NewPluginConfig()
	factory := wireconfig.NewResMapFactory(pluginConfig)
	fileSystem := wireconfig.NewFileSystem()
	transformerFactory := wireconfig.NewTransformerFactory()
	kustomizeProvider := wireconfig.NewKustomizeProvider(factory, fileSystem, transformerFactory, pluginConfig)
	rawConfigFileProvider := &resourceconfig.RawConfigFileProvider{}
	configProvider := wireconfig.NewConfigProvider(resourceConfigPath, kustomizeProvider, rawConfigFileProvider)
	resourceConfigs, err := wireconfig.NewResourceConfig(resourceConfigPath, configProvider)
	if err != nil {
		return nil, err
	}
	v, err := NewStatusCommandResult(resolver, resourceConfigs)
	if err != nil {
		return nil, err
	}
	return v, nil
}
