// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wiretest

import (
	"gopkg.in/src-d/go-git.v4/plumbing/object"
	"io"
	"sigs.k8s.io/cli-experimental/internal/pkg/apply"
	"sigs.k8s.io/cli-experimental/internal/pkg/clik8s"
	"sigs.k8s.io/cli-experimental/internal/pkg/dy"
	"sigs.k8s.io/cli-experimental/internal/pkg/dy/dispatch"
	"sigs.k8s.io/cli-experimental/internal/pkg/dy/list"
	"sigs.k8s.io/cli-experimental/internal/pkg/dy/output"
	"sigs.k8s.io/cli-experimental/internal/pkg/dy/parse"
	"sigs.k8s.io/cli-experimental/internal/pkg/status"
	"sigs.k8s.io/cli-experimental/internal/pkg/wirecli/wirek8s"
)

// Injectors from wire.go:

func InitializeStatus(resourceConfigs clik8s.ResourceConfigs, commit *object.Commit, writer io.Writer) (*status.Status, func(), error) {
	config, cleanup, err := NewRestConfig()
	if err != nil {
		return nil, nil, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	statusStatus := &status.Status{
		Resources: resourceConfigs,
		Out:       writer,
		Clientset: clientset,
		Commit:    commit,
	}
	return statusStatus, func() {
		cleanup()
	}, nil
}

func InitializeApply(resourceConfigs clik8s.ResourceConfigs, commit *object.Commit, writer io.Writer) (*apply.Apply, func(), error) {
	config, cleanup, err := NewRestConfig()
	if err != nil {
		return nil, nil, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	applyApply := &apply.Apply{
		Clientset: clientset,
		Out:       writer,
		Resources: resourceConfigs,
		Commit:    commit,
	}
	return applyApply, func() {
		cleanup()
	}, nil
}

func InitializeCommandBuilder(writer io.Writer) (*dy.CommandBuilder, func(), error) {
	config, cleanup, err := NewRestConfig()
	if err != nil {
		return nil, nil, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	clientsetClientset, err := wirek8s.NewExtensionsClientSet(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	dynamicInterface, err := wirek8s.NewDynamicClient(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	commandLister := &list.CommandLister{
		Client:        clientsetClientset,
		DynamicClient: dynamicInterface,
	}
	commandParser := &parse.CommandParser{}
	commandOutputWriter := &output.CommandOutputWriter{
		Output: writer,
	}
	dispatcher := &dispatch.Dispatcher{
		KubernetesClient: clientset,
		DynamicClient:    dynamicInterface,
		Writer:           commandOutputWriter,
	}
	commandBuilder := &dy.CommandBuilder{
		KubernetesClient: clientset,
		Lister:           commandLister,
		Parser:           commandParser,
		Dispatcher:       dispatcher,
		Writer:           commandOutputWriter,
	}
	return commandBuilder, func() {
		cleanup()
	}, nil
}

func InitializeDispatcher(writer io.Writer) (*dispatch.Dispatcher, func(), error) {
	config, cleanup, err := NewRestConfig()
	if err != nil {
		return nil, nil, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	dynamicInterface, err := wirek8s.NewDynamicClient(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	commandOutputWriter := &output.CommandOutputWriter{
		Output: writer,
	}
	dispatcher := &dispatch.Dispatcher{
		KubernetesClient: clientset,
		DynamicClient:    dynamicInterface,
		Writer:           commandOutputWriter,
	}
	return dispatcher, func() {
		cleanup()
	}, nil
}

func InitializeLister(writer io.Writer) (*list.CommandLister, func(), error) {
	config, cleanup, err := NewRestConfig()
	if err != nil {
		return nil, nil, err
	}
	clientset, err := wirek8s.NewExtensionsClientSet(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	dynamicInterface, err := wirek8s.NewDynamicClient(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	commandLister := &list.CommandLister{
		Client:        clientset,
		DynamicClient: dynamicInterface,
	}
	return commandLister, func() {
		cleanup()
	}, nil
}
