// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dy

import (
	"io"
	"sigs.k8s.io/cli-experimental/internal/pkg/dy/dispatch"
	"sigs.k8s.io/cli-experimental/internal/pkg/dy/list"
	"sigs.k8s.io/cli-experimental/internal/pkg/dy/output"
	"sigs.k8s.io/cli-experimental/internal/pkg/dy/parse"
	"sigs.k8s.io/cli-experimental/internal/pkg/util"
	"sigs.k8s.io/cli-experimental/internal/pkg/wirecli/wirek8s"
)

// Injectors from wire.go:

func InitializeCommandBuilder(writer io.Writer, args util.Args) (*CommandBuilder, error) {
	configFlags, err := wirek8s.NewConfigFlags(args)
	if err != nil {
		return nil, err
	}
	config, err := wirek8s.NewRestConfig(configFlags)
	if err != nil {
		return nil, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		return nil, err
	}
	clientsetClientset, err := wirek8s.NewExtensionsClientSet(config)
	if err != nil {
		return nil, err
	}
	dynamicInterface, err := wirek8s.NewDynamicClient(config)
	if err != nil {
		return nil, err
	}
	commandLister := &list.CommandLister{
		Client:        clientsetClientset,
		DynamicClient: dynamicInterface,
	}
	commandParser := &parse.CommandParser{}
	commandOutputWriter := &output.CommandOutputWriter{
		Output: writer,
	}
	dispatcher := &dispatch.Dispatcher{
		KubernetesClient: clientset,
		DynamicClient:    dynamicInterface,
		Writer:           commandOutputWriter,
	}
	commandBuilder := &CommandBuilder{
		KubernetesClient: clientset,
		Lister:           commandLister,
		Parser:           commandParser,
		Dispatcher:       dispatcher,
		Writer:           commandOutputWriter,
	}
	return commandBuilder, nil
}
